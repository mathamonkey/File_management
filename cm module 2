#include <iostream>
#include <windows.h>
#include <string>
#include <conio.h>
#include <vector>
#include <fstream>
#include <algorithm>
using namespace std;

const int display_limit=8;//0-7
const string deliminator_for_adding="/*deliminator*/";
const string file_to_store_file_names="test1.txt";

void clearscreen()
{
    HANDLE hOut;
    COORD Position;

    hOut = GetStdHandle(STD_OUTPUT_HANDLE);

    Position.X = 0;
    Position.Y = 0;
    SetConsoleCursorPosition(hOut, Position);
}

 ///SEARCH BLOCK

int ispresent(string pattern, string text)
{
string pattern_c=pattern;
int n=pattern.size();
int h[n];
h[0]=1;//// our h[] of kmp

for(int i=1;i<n;++i)
{
  for(int j=1;j<=i;++j)
  {
     int m=0;
     for(int k=j;k<=i;++k)
     {
        if(pattern[m]==pattern_c[k])
        m++;
        else break;

     }

     if(m==i-j+1)
     {
       h[i]=j;
       break;
     }
     else h[i]=i+1;

  }


}






for(int i=0;i<text.size();)
{
   int flag=0;
   int temp=i;
   for(int j =0;j<pattern.size();++j)
   {
      if(text[temp]!=pattern[j])
      {
        flag =1;
        i=i+h[j];
        break;
      }
      else
     temp++;

   }

   if(flag==0)
   return 1;
}

return 0;

}


void match(string pattern, vector <string> keywords, vector <int> &value)
{

    for(int i=0;i<keywords.size();++i)
    {
        value[i]=value[i]+ ispresent(pattern,keywords[i]);

    }


}

void write(string keyword, string filename)
{
    ofstream fo(filename,ios::app|ios::binary);
    fo<<keyword;
    fo<<endl;
    fo.close();

}

void read_to_console(string file_name)
{
string line;
ifstream fi(file_name,ios::binary|ios::in);
while(!fi.eof())
{
getline(fi,line);
cout<<line<<endl;
}

fi.close();

}

void read_to_vector(string file_name, vector<string> &list_of_all_file_names)
{

string keyword;
ifstream fi(file_name,ios::binary|ios::in);
while(!fi.eof())
{
getline(fi,keyword);
transform(keyword.begin(), keyword.end(), keyword.begin(), ::tolower);
list_of_all_file_names.push_back(keyword);
}

fi.close();

}

void divide (string s, vector<string>&p) //// divide s from spaces and store in vector p
{
    string temp;
  for(int i=0;;++i)
    {
        if(s[i]==' ' || s[i]=='\0')
        {
             if(temp!="")
            {
               p.push_back(temp);
               temp="";
            }
        }
        else
        temp.push_back(s[i]);

        if(s[i]=='\0')
            break;
    }

}

void displayChoices(string s, vector<string>keywords, vector <string> &choice)
{
    choice.clear();
    vector<string> p;
    divide(s,p);  // divide s from spaces and store in vector p

    vector <int> value;
    value.resize(keywords.size());

      for(int i=0;i<keywords.size();++i)
    {
        value[i]=0;
    }

 for(int i=0;i<p.size();++i)
    {
        match(p[i],keywords, value);    //// p[] is vector each element is a word typed in search query
                                  //// keywords[] is a vector each element is a key word in the database it came from read_to_vector()
    }                             //// vec [][] is a 2-d vector which will store different different no. of key wordswhich contain a perticular element of p[]


 for(int j=0;j<display_limit;++j)
    { int maxval=-1,maxkEY=0;          //// keywords.size()=value.size()

        for(int i=0;i<keywords.size();++i)
        {
            if(value[i]>maxval)
            {
                maxval=value[i];
                maxkEY=i;

            }

        }
      value[maxkEY]=-1;
      cout<<j+1<<": "<<keywords[maxkEY]<<endl;
      choice.push_back(keywords[maxkEY]);
    }

}

s_earch()
{
    vector <string> choice;
    vector<string> keywords;
    read_to_vector(file_to_store_file_names,keywords);

    string query="";
    bool flag =false;

    for(char ch;ch!=13;)
    {
      system("CLS");
      if(flag==false)
        flag=true;
     else  displayChoices(query,keywords,choice);

    cout<<"Enter queries"<<endl;
    cout<<query;
    ch= getch();
    ch=tolower(ch, locale());
    if(ch=='8' || ch=='127' || ch=='\b')
       { if(query.size()!=0)
         query.pop_back();
       }
    else
    query.push_back(ch);

    }
label1:
cout<<endl<<"Enter your choice (1-"<<display_limit<<"): ";
int cho;
cin>>cho;

if(cho<1 || cho>display_limit)
{
    cout<<endl<<"Enter a valid choice!!!!"<<endl;
    goto label1;
}
else                                // choice contains all the filenames in the order in which user saw at last on the console
    read_to_console(choice[cho-1]); // function to display content corresponding to keyword choice[cho]
   //cout<<choice[cho-1];
}

/// SEARCH BLOCK


void add()
{
    system("cls");

    cout<<"Enter the title of code snippet"<<endl;

    string file_name,line="";
    label2:
    cin.ignore();
    getline(cin,file_name);

    transform(file_name.begin(), file_name.end(), file_name.begin(), ::tolower);

    vector<string> list_of_all_file_name;

    read_to_vector(file_to_store_file_names ,list_of_all_file_name);

    for(int i=0;i<list_of_all_file_name.size();++i)
    {
        if(list_of_all_file_name[i]==file_name)
        {
            cout<<"A file of this name already exists!!!"<<endl;
            cout<<"Again enter another name:"<<endl;
            goto label2;
        }

    }

    write(file_name,file_to_store_file_names);

    cout<<"Enter code snippet which needs to be added to the data base."<<endl<<endl;
    cout<< "(Enter '"<<deliminator_for_adding<<"' as the last line to stop entering more)."<<endl;

    cin.ignore();
    while(true)
    {
        getline(cin,line);

        if(line!=deliminator_for_adding)
            break;

        write(line,file_name);



    }

}




void mainMenu()
{
    cout<<"Code management software"<<endl;
    cout<<"Press 1 to search the database"<<endl;
    cout<<"Press 2 to add code snippet to database"<<endl;
    cout<<"Press 3 to remove code snippet from database"<<endl;
    cout<<"Press 0 to exit the program"<<endl;

    int choice;
    label:

    cin>>choice;
    switch(choice)
    {
        case 1:  s_earch();
        break;

        case 2: add();
            //cout<<"2";
        break;

        case 3: //d_elete();
            cout<<"3";
        break;

        case 0: exit(0);
        break;

        default: cout<<">> Enter a valid choice!!!"<<endl;
        goto label;
    }


}
int main()
{
    mainMenu();

/*string keywords;

char ch='y';
while(ch=='y')
{
cout<<"Enter key words"<<endl;
getline(cin, keywords);
string file_name="test1.txt";
write(keywords,file_name);
cout<<"Enter choice"<<endl;
cin>>ch;
cin.ignore();
}
*/

    return 0;
}



















