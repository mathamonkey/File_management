#include <iostream>
#include <windows.h>
#include <string>
#include <conio.h>
#include <vector>
#include <fstream>
#include <algorithm>
using namespace std;


const int display_limit=8;//0-7
const string deliminator_for_adding="/*deliminator*/";
const string index="indexFile";
const string nullstr="ANY UPPER-CASE STRING WILL WORK";

void clearscreen()
{
    HANDLE hOut;
    COORD Position;

    hOut = GetStdHandle(STD_OUTPUT_HANDLE);

    Position.X = 0;
    Position.Y = 0;
    SetConsoleCursorPosition(hOut, Position);
}

bool file_is_empty(std::ifstream& pFile)
{
    return pFile.peek() == std::ifstream::traits_type::eof();
}

 ///SEARCH BLOCK

int ispresent(string pattern, string text)
{
string pattern_c=pattern;
int n=pattern.size();
int h[n];
h[0]=1;//// our h[] of kmp

for(int i=1;i<n;++i)
{
  for(int j=1;j<=i;++j)
  {
     int m=0;
     for(int k=j;k<=i;++k)
     {
        if(pattern[m]==pattern_c[k])
        m++;
        else break;

     }

     if(m==i-j+1)
     {
       h[i]=j;
       break;
     }
     else h[i]=i+1;

  }


}






for(int i=0;i<text.size();)
{
   int flag=0;
   int temp=i;
   for(int j =0;j<pattern.size();++j)
   {
      if(text[temp]!=pattern[j])
      {
        flag =1;
        i=i+h[j];
        break;
      }
      else
     temp++;

   }

   if(flag==0)
   return 1;
}

return 0;

}


void match(string pattern, vector <string> keywords, vector <int> &value)
{

    for(int i=0;i<keywords.size();++i)
    {
        value[i]=value[i]+ ispresent(pattern,keywords[i]);

    }


}

void write(string keyword, string filename)
{
    ofstream fo(filename+".txt",ios::app);
    fo<<keyword;
    fo<<endl;
    fo.close();

}

void display_file(string file_name)
{
      string argument="notepad.exe  "+file_name+".txt";
      const char * argument_in_char = argument.c_str();
      system(argument_in_char);

}

void read_to_vector(string file_name, vector<string> &list_of_all_file_names)
{

string keyword;
ifstream fi;
fi.open(file_name+".txt",ios::in);
if(!fi)
{
    ofstream fo(file_name+".txt",ios::out);
    fo.close();
    return;
}
while(!fi.eof())
{
  getline(fi,keyword);
  if(keyword!="")
  {
    transform(keyword.begin(), keyword.end(), keyword.begin(), ::tolower);
    list_of_all_file_names.push_back(keyword);

  }

}

fi.close();

}

void divide (string s, vector<string>&p) //// divide s from spaces and store in vector p
{
    string temp;
  for(int i=0;;++i)
    {
        if(s[i]==' ' || s[i]=='\0')
        {
             if(temp!="")
            {
               p.push_back(temp);
               temp="";
            }
        }
        else
        temp.push_back(s[i]);

        if(s[i]=='\0')
            break;
    }

}

void displayChoices(string s, vector<string>index, vector <string> &choice)
{

    choice.clear();
    vector<string> p;
    divide(s,p);  // divide s from spaces and store in vector p

    vector <int> value;
    value.resize(index.size());

      for(int i=0;i<index.size();++i)
    {
        value[i]=0;
    }

 for(int i=0;i<p.size();++i)
    {
        match(p[i],index, value);    //// p[] is vector each element is a word typed in search query
                                  //// index[] is a vector each element is a key word in the database it came from read_to_vector()
    }                             //// vec [][] is a 2-d vector which will store different different no. of key wordswhich contain a perticular element of p[]

int limit= (display_limit-index.size())? index.size():display_limit;
 for(int j=0;j<limit;++j)
    { int maxval=-1,maxkEY=0;          //// index.size()=value.size()

        for(int i=0;i<index.size();++i)
        {
            if(value[i]>maxval)
            {
                maxval=value[i];
                maxkEY=i;

            }

        }
      value[maxkEY]=-1;
      cout<<j+1<<": "<<index[maxkEY]<<endl;
      choice.push_back(index[maxkEY]);
    }

}

string s_earch()
{

      vector <string> choice;
      vector<string> file_names;
      read_to_vector(index, file_names);

      if(file_names.size()==0)
      {
         return nullstr;
      }

      string query="";
      bool flag =false;

      for(char ch;ch!=13;)
     {
         system("CLS");
         if(flag==false)
         flag=true;
         else  displayChoices(query,file_names,choice);

       cout<<"Enter queries"<<endl;
       cout<<query;
       ch= getch();
       ch=tolower(ch, locale());
       if(ch=='8' || ch=='127' || ch=='\b')
         { if(query.size()!=0)
           query.pop_back();
         }
       else
        query.push_back(ch);

      }

         int limit=(display_limit-file_names.size())? file_names.size():display_limit ;
      cout<<endl<<"Enter your choice (1-"<<limit<<"): ";
      int cho;
      cin>>cho;

      while(cin.fail() || cho<1 || cho>limit )
      {
        cout << "Enter a valid choice!!!!" << endl;
        cin.clear();
        cin.ignore(1000,'\n');
        cin >> cho;

      }
      cin.ignore(1000,'\n');
                                       // choice contains all the filenames in the order in which user saw at last on the console
       return choice[cho-1];           // function to display content corresponding to keyword choice[cho]


}
/// SEARCH BLOCK


void add_to_new_file()
{
    system("cls");

    cout<<"Enter the title of code snippet"<<endl;

    string file_name="",line="";
    label:
   // cin.ignore();
    while(file_name=="")
    {
       getline(cin,file_name);
       if(file_name=="")
       cout<<"Enter a valid file name!!!"<<endl;
    }
    transform(file_name.begin(), file_name.end(), file_name.begin(), ::tolower);

    vector<string> list_of_all_file_name;

    read_to_vector(index ,list_of_all_file_name);

    for(int i=0;i<list_of_all_file_name.size();++i)
    {
        if(list_of_all_file_name[i]==file_name)
        {
            cout<<"A file of this name already exists!!!"<<endl;
            label1:
            cout<<"Do you want to replace it? <y/n>"<<endl;
            char ch;
            ch=getch();
            if(ch=='y')
             {
                 ///add_to_existing_file();
             }
            else if(ch=='n')
            {
                cout<<"Enter another file name"<<endl;
                goto label;
            }

            else
            {
                cout<<"Enter a valid choice!!!!!"<<endl;
                goto label1;

            }

        }

    }

    write(file_name,index);
    write("",file_name);

    cout<<"Enter code snippet in the notepad file"<<endl;
    getch();
    display_file(file_name);

}

void open_a_file()
{
    string file=s_earch();

    if(file==nullstr)
    {  cout<<"Data base is empty!!!!"<<endl;
       getch();
       return;
    }

    display_file (file);


}


void rename_file()
{
    string old_name=s_earch();
    system("CLS");

    if(old_name==nullstr)
    {
        cout<<"Database is empty!!!!"<<endl;
        getch();
        return;
    }

    string old_name_temp=old_name + ".txt";
     label3:
    cout<<"Enter new file name"<<endl;
    string new_name;
    getline(cin,new_name);
    string new_name_temp=new_name + ".txt";

    vector<string>list_of_all_file_names;
    read_to_vector(index, list_of_all_file_names);

    for(int i=0;i<list_of_all_file_names.size();++i)
    {
        if(new_name==list_of_all_file_names[i])
        {
            cout<<"File of this name is already present, use any other name"<<endl;
            goto label3;
        }
    }

    const char * new_name_in_char = new_name_temp.c_str();
    const char * old_name_in_char = old_name_temp.c_str();


    rename(old_name_in_char,new_name_in_char);

    string  non_const_index=index;
    non_const_index+=".txt";
    const char * index_in_char=non_const_index.c_str();
    remove(index_in_char);


    for(int i=0;i<list_of_all_file_names.size();++i)
    {
        if(list_of_all_file_names[i]!=old_name)
        write(list_of_all_file_names[i],index);

        else write(new_name,index);

    }




}

void display_file_to_console(string file_name)
{
    system("CLS");
    string keyword;
    ifstream fi;
    fi.open(file_name+".txt",ios::in);
    if(file_is_empty(fi))
    {
        cout<<"Database is empty!!!!";
        getch();
        return;

    }

    while(!fi.eof())
    {
        getline(fi,keyword);
        if(keyword!="")
      {
        cout<<keyword<<endl;
      }

    }
 getch();

}

void delete_file()
{
    string file_name=s_earch();
    if(file_name==nullstr)
    {
        cout<<"Database is already empty!!"<<endl;
        getch();
        return;

    }

    string file_name_temp=file_name+".txt";
    const char * file_name_in_char=file_name_temp.c_str();
    remove(file_name_in_char);

    string  non_const_index=index;
    non_const_index+=".txt";
    const char * index_in_char=non_const_index.c_str();

    vector <string> list_of_all_file_names;
    read_to_vector(index,list_of_all_file_names);

    remove(index_in_char);

    for(int i=0;i<list_of_all_file_names.size();++i)
    {
        if(list_of_all_file_names[i]!=file_name)
        write(list_of_all_file_names[i],index);

    }

    cout<<"Delete successful"<<endl<<"Press any key to return to main menu";
    getch();

}

void delete_everything()
{
    vector<string> list_of_all_file_names;
    read_to_vector(index,list_of_all_file_names);

    string file;

    for(int i=0;i<list_of_all_file_names.size();++i)
    {
        file=list_of_all_file_names[i]+".txt";
        const char * file_in_char=file.c_str();
        remove(file_in_char);
    }

    string index_non_const=index+".txt";
    const char * index_in_char = index_non_const.c_str();
    remove(index_in_char);

    cout<<"Data base is totally empty now"<<endl;
    getch();
}

void mainMenu()
{
  while(true)
 {
    system("CLS");
    cout<<"Code management software"<<endl;
    cout<<"Press 1 to retrieve a file"<<endl;
    cout<<"Press 2 to add a new file"<<endl;
    cout<<"Press 3 to display whole index file(which has all the file names)"<<endl;
    cout<<"Press 4 to rename a file"<<endl;
    cout<<"Press 5 to delete a file"<<endl;
    cout<<"Press 6 to reset(delete) everything"<<endl;
    cout<<"Press 0 to exit the program"<<endl;

    unsigned int choice;
    cin>>choice;

    while(cin.fail() || choice>6)
    {
        cout << "Enter a valid choice!!!!<0-6>" << endl;
        cin.clear();
        cin.ignore(1000,'\n');
        cin >> choice;
    }
    cin.ignore(1000,'\n');

    switch(choice)
    {
        case 1:  open_a_file();
        break;

        case 2:  add_to_new_file();
        break;

        case 3:  display_file_to_console(index);
        break;

        case 4:  rename_file();
        break;

        case 5:  delete_file();
        break;

        case 6: delete_everything();
        break;

        case 0: exit(0);
        break;

    }

 }

}




int main()
{
    mainMenu();

    return 0;
}






























